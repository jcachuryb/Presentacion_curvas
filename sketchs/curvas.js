function drawCardinalScript(){
   // Simple way to attach js code to the canvas is by using a function
  function sketchProc($p) {
    var nSegmentos =  100;
    var t =  -2; 
    var b = -5; 
    var c = 5;
    var offset; 
    var mode=1;
    var numPoints =  6;
    var ep =  10; 
    var locked =  []; 
    var overPoint =  [];
    var bx =  [];
    var by =  [];
    var xOffset =  [];
    var yOffset =  [];
    var s =  (1-t)/2;
    var id = numPoints;
    var shapeSize = 10;
    // ============ Vars para controlar los eventos de mouse con precisión. 
    var mx, my;
    var xOffset = 82.524658203125;
    var yOffset = 34.76731872558594;
    var kx,ky;
    // ============ Hasta acá

    function setup() {
      $p.size(600, 400); 
      //::::::::
      kx = $p.width/503;
      ky = $p.height/355;
      //::::::::
      $p.noSmooth();
      offset = ($p.width-10)/numPoints;
      var x, y;
      mDot = [];
      for (var i = 0; i<numPoints; i++) {
        bx[i] = $p.random(i*offset, offset*(i + 1));
        by[i] = $p.random(50, $p.height-50);
      }
    }
    $p.setup = setup;
    setup = setup.bind($p);

    function draw() {
      $p.background(255);  
      modoCardinal();
    }
    $p.draw = draw;
    draw = draw.bind($p);

    function modoCardinal() {
      var xa = 0;
      var ya = 0;
      $p.stroke(100, 200, 100);
      $p.strokeWeight(8);
      $p.point(bx[0], by[0]);
      $p.point(bx[1], by[1]);
      for( var i=1; i<numPoints-2; i++ ) { 
          for(var u=0;u<=1.0;u+=1.0/nSegmentos){
              if(u==0.0){
                $p.stroke(100, 200, 100);
                $p.strokeWeight(8);
                xa=bx[i];
                ya=by[i];
            }
            else{
                var x = (bx[i-1] * CAR1(u)) + (bx[i] * CAR2(u)) + (bx[i +1] * CAR3(u)) + (bx[i +2] * CAR4(u));
                var y = (by[i-1] * CAR1(u)) + (by[i] * CAR2(u)) + (by[i +1] * CAR3(u)) + (by[i +2] * CAR4(u));
                
                $p.stroke(255, 0, 0);
                $p.strokeWeight(2);
                $p.line(xa,ya,x,y);
                
                $p.stroke(0);
                $p.strokeWeight(8);      
                xa=x;
                ya=y;
            }
          }
          $p.stroke(255, 0, 0);
          $p.strokeWeight(2);
          $p.line(xa,ya,bx[i+1], by[i+1]);
          
          $p.stroke(100, 200, 100);
          $p.strokeWeight(8);
          $p.point(bx[i+2], by[i+2]);
      } 
    }


    function mousePressed() {
      actualizarPuntos();
      for (var i = 0; i<numPoints; i++) {
        if ($p.sqrt($p.pow(mx-bx[i], 2) + $p.pow(my-by[i], 2)) <= shapeSize) {
          id = i;
          locked[i] = true;
        }
      }    
    }
    $p.mousePressed = mousePressed;
    mousePressed = mousePressed.bind($p);

    function actualizarPuntos(){
      var rect = canvas.getBoundingClientRect();
      mx = (($p.abs(event.clientX) - $p.abs(rect.left)) + xOffset) * kx;
      my = (($p.abs(event.clientY) - $p.abs(rect.top)) + yOffset )* kx;
    }

    //****************************************************************************
    // this code was autogenerated from PJS
    function mouseDragged() {
      actualizarPuntos();
      if (id != numPoints && locked[id]) {
        bx[id] = mx;
        by[id] = my;
      } 
    }
    $p.mouseDragged = mouseDragged;
    mouseDragged = mouseDragged.bind($p);

    //****************************************************************************

    function mouseReleased() {
      setAllFalse(locked);
    }
    $p.mouseReleased = mouseReleased;
    mouseReleased = mouseReleased.bind($p);

    function setAllFalse(arr) {
      for(var i = 0;  i<arr.length;  i++){
        arr[i] = false;
      }
    }
    $p.setAllFalse = setAllFalse;
    setAllFalse = setAllFalse.bind($p);




    function CAR1(u){
        var r = ((-s*$p.pow(u,3)) + (2*s*$p.pow(u,2)) - (s*u)); 
        return r;
    }
    $p.CAR1 = CAR1;
    CAR1 = CAR1.bind($p);
    function CAR2(u){
        var r = (((2-s)*$p.pow(u,3)) + ((s-3)*$p.pow(u,2)) + 1); 
        return r;
    }
    $p.CAR2 = CAR2;
    CAR2 = CAR2.bind($p);
    function CAR3(u){
        var r = (((s-2)*$p.pow(u,3)) + ((3-2*s)*$p.pow(u,2)) + (s*u)); 
        return r;
    }
    $p.CAR3 = CAR3;
    CAR3 = CAR3.bind($p);
    function CAR4(u){
        var r = ((s*$p.pow(u,3)) - (s*$p.pow(u,2))); 
        return r;
    }
    $p.CAR4 = CAR4;
    CAR4 = CAR4.bind($p);
}


  var canvas = document.getElementById("canvas2");
  // attaching the sketchProc function to the canvas
  var p = new Processing(canvas, sketchProc);
  // p.exit(); to detach it
}